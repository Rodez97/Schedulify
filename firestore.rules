rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {


    function isAuthenticated(){
      return request.auth != null;
    }

    function isUser(uid){
      return request.auth != null && request.auth.uid == uid;
    }

    function isOwner(uid){
      return isAuthenticated() && uid == request.auth.uid;
    }

    match /customers/{uid} {
      allow read: if request.auth.uid == uid;

      match /checkout_sessions/{id} {
        allow read, write: if request.auth.uid == uid;
      }
      match /subscriptions/{id} {
        allow read: if request.auth.uid == uid;
      }
      match /payments/{id} {
        allow read: if request.auth.uid == uid;
      }
    }

    match /products/{id} {
      allow read: if true;

      match /prices/{id} {
        allow read: if true;
      }

      match /tax_rates/{id} {
        allow read: if true;
      }
    }

    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isUser(userId);
    }

    match /collaboratorRequests/{requestId} {
      allow read: if isAuthenticated() 
        && (get(/databases/$(database)/documents/schedules/$(resource.data.scheduleId)).data.ownerId == request.auth.uid || resource.data.email == request.auth.token.email);
      allow create: if isAuthenticated() && get(/databases/$(database)/documents/schedules/$(request.resource.data.scheduleId)).data.ownerId == request.auth.uid;
      allow update, delete: if isAuthenticated() && (get(/databases/$(database)/documents/schedules/$(resource.data.scheduleId)).data.ownerId == request.auth.uid || resource.data.email == request.auth.token.email);
    }

    function updateScheduleMembership(scheduleId){
      let owner = get(/databases/$(database)/documents/schedules/$(scheduleId)).data.ownerId == request.auth.uid;
      let collaborator = request.auth.uid in resource.data.collaborators.keys();
      let updatingCollaborators = owner && ("collaborators" in request.resource.data.diff(resource.data).affectedKeys());
      let updatingMembers = (owner || collaborator) && ("members" in request.resource.data.diff(resource.data).affectedKeys());
      return updatingCollaborators || updatingMembers;
    }

    function readScheduleMembership(scheduleId){
      let owner = get(/databases/$(database)/documents/schedules/$(scheduleId)).data.ownerId == request.auth.uid;
      let collaborator = request.auth.uid in get(/databases/$(database)/documents/schedules/$(scheduleId)).data.collaborators;
      return owner || collaborator;
    }

    match /scheduleMembership/{scheduleId} {
      allow read: if isAuthenticated() && readScheduleMembership(scheduleId);
      allow create: if isAuthenticated() && get(/databases/$(database)/documents/schedules/$(scheduleId)).data.ownerId == request.auth.uid;
      allow update: if isAuthenticated() && updateScheduleMembership(scheduleId);
    }

    function updateSchedule(){
      let owner = resource.data.ownerId == request.auth.uid;
      let collaborator = request.auth.uid in resource.data.collaborators;
      let updatingInfo = request.resource.data.diff(resource.data).affectedKeys().hasOnly(["name","color"]) && owner;  
      let updatingCollaborators = owner && request.resource.data.diff(resource.data).affectedKeys().hasOnly(["collaborators"]);
      let updatingMembers = (owner || collaborator) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(["members"]);
      let updatingSettings = (owner || collaborator) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(["settings"]);
      return updatingInfo || updatingCollaborators || updatingMembers || updatingSettings; 
    }

    match /schedules/{scheduleId} {
      allow read: if isAuthenticated() && (isOwner(resource.data.ownerId) || resource.data.collaborators.hasAny([request.auth.uid]) || resource.data.members.hasAny([request.auth.token.email]));
      allow update: if updateSchedule();
      allow delete: if isOwner(resource.data.ownerId);    
      allow create: if isOwner(request.resource.data.ownerId) && request.resource.data.tier == "free";


      function isScheduleOwner(){
        return get(/databases/$(database)/documents/schedules/$(scheduleId)).data.ownerId == request.auth.uid;
      }

      function isScheduleCollaborator(){
        return request.auth.uid in get(/databases/$(database)/documents/schedules/$(scheduleId)).data.collaborators;
      }

      function isScheduleMember(){
        return request.auth.token.email in get(/databases/$(database)/documents/schedules/$(scheduleId)).data.members;
      }

      match /weeks/{weekId} {
        allow read, write: if isScheduleOwner() || isScheduleCollaborator();
      }

      match /shifts/{shiftId} {
        allow read, write: if isScheduleOwner() || isScheduleCollaborator();
      }

      match /readonlySchedules/{weekId} {
        allow write: if isScheduleOwner() || isScheduleCollaborator();
        allow read: if isScheduleOwner() || isScheduleCollaborator() || isScheduleMember();
      }
    }
  }
}